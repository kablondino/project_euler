!-----------------------------------------------------------------------------
! Problem 2: Even Fibonacci Numbers
! Each new term in the Fibonacci sequence is generated by adding the
! previous two terms. By starting with 1 and 2, the first 10 terms will be:
! 	1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
!
! By considering the terms in the Fibonacci sequence whose values do
! not exceed four million, find the sum of the even-valued terms.
!-----------------------------------------------------------------------------

recursive integer*8 function Fibonacci(AN) result(Fib_number)
    implicit none
    ! Calculates the Fibonacci numbers recursively
    integer*8, intent(in) :: AN

    if( AN <= 0 ) then
        Fib_number = 0
    else if( AN == 1 ) then
        Fib_number = 1
    else
        Fib_number = Fibonacci(AN - 1) + Fibonacci(AN - 2)
! NOTE that the following method does not quite round correctly, giving a
! false positive on a particular Fibonacci number.
!    else
!        Fib_number = ( (1.0 + SQRT(5.0))**AN - (1.0 - SQRT(5.0))**AN ) &
!            / ( (2.0)**AN * SQRT(5.0) )
    endif

end function Fibonacci


program problem2
    implicit none
    integer*8 :: i, the_sum, Fibonacci

    i = 2
    the_sum = 0

    do while( Fibonacci(i) <= int(4.0e6, 8) )
        if( mod(Fibonacci(i), 2) == 0 ) then
            the_sum = the_sum + Fibonacci(i)
        endif
        i = i + 1
    enddo

    write(*,'(a, a, I0)') "The sum of the even-valued terms of the ", &
        "Fibonacci sequence up to 4 million is ", the_sum

end program problem2

