/*
 *	Problem 2: Even Fibonacci Numbers
 *	Each new term in the Fibonacci sequence is generated by adding the
 *	previous two terms. By starting with 1 and 2, the first 10 terms will be:
 *		1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 *	By considering the terms in the Fibonacci sequence whose values do
 *	not exceed four million, find the sum of the even-valued terms.
 */

package main

import ( "fmt"
		"math" )

func F( AN int ) {
	if AN <= 0 {
		return 0
	}
	if AN == 1 {
		return 1
	}
	if AN > 1 {
		return ( math.Pow((1 + math.Sqrt(5)), AN) - math.Pow((1 - math.Sqrt(5)), AN) ) / ( math.Pow(2, AN) * math.Sqrt(5))
	}
}

func main() {

	the_sum := 0
	i := 0

	for F(i) <= 4.0e6 {
		if F(i) % 2 == 0 { the_sum += F(i) }
		i += 1
	}

	fmt.Println( the_sum )
}

