#!/usr/bin/awk -f

#=============================================================================
#	Problem 2: Even Fibonacci numbers
#
#	Each new term in the Fibonacci sequence is generated by adding the
#	previous two terms. By starting with 1 and 2, the first 10 terms will be:
#			1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
#	By considering the terms in the Fibonacci sequence whose values do
#	not exceed four million, find the sum of the even-valued terms.
#=============================================================================


# Binet's formula, but the rounding does not work
#function F(AN) {
#	if(AN <= 0) {
#		return 0
#	}
#	else if(AN == 1) {
#		return 1
#	}
#	else {
#		return int(((1 + sqrt(5))^AN - (1 - sqrt(5))^AN) / (2^AN * sqrt(5)))
#	}
#}

# Recursive function
function F(AN) {
	return (AN < 2 ? AN : F(AN - 1) + F(AN - 2))
}


BEGIN {
	the_sum = 0
	i = 2
	current = F(i)
	while(current <= 4000000) {
		if(current % 2 == 0) {
			the_sum += current
		}
		i += 1
		# For the next iteration
		current = F(i)
	}

	printf "The sum of the even-valued terms of the Fibonacci sequence up to 4 million is %d\n", the_sum
}

